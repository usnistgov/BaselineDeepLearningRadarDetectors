% MATLAB script that sends (transmits) the simulated radar plus noise waveforms 
% Step 1: load a single simulated waveform Matlab workspace generated by the NIST CBRS band radar waveform generator (see link below)
% Step 2: Configure the USRP radio to send waveform sample data
% Step 3: Preappend 80 ms of zero amplitude IQ samples to the beginning of the radar waveform buffer as a Tx sync signal
% Step 4: Plot the time domain magnitude of the IQ samples that were sent
% Step 5: Enter loop to repeatedly send each of the waveform samples in the radar waveform dataset
%
% The waveform generator is available here: https://github.com/usnistgov/SimulatedRadarWaveformGenerator
% This script was tested with MATLAB 2019b
% Software was originally design and tested on a Dell Latitude 7440 running Ubuntu Linux 16.04 (i5-4300U Dual Core, 1.9 GHz, 16GB RAM)
% Tested with a USRP-N210 with Daughter Board: 'SBXv3 RX'
% 
% Author Info: Alex Lackpour, alackpour@gmail.com
% Date: April 5th, 2021
% Version: 1.0, public release

clear; clc

sendingUSRPIPAddress = '192.168.10.2';

%% Step 1: load a single simulated waveform Matlab workspace generated by the NIST CBRS band radar waveform generator (see link below)
dataPath = '../Group6_data/Group6_orig/Group6/';
cd(dataPath)

% User needs to select a particular MATLAB workspace containing the waveform to send
[fileName, dataRootFolder] = uigetfile('group6*.mat');

cd(dataRootFolder)

load(fileName)

%% Step 2: Configure the USRP radio to send waveform sample data
% USRP N200/N210/USRP2 master clock rate is 100 MHz
USRPclockRate_Hz = 100e6;
desiredSampleRate_Hz = 10e6;

interpolationFactor = USRPclockRate_Hz / desiredSampleRate_Hz;
Fs_Hz = USRPclockRate_Hz/interpolationFactor;

txSDR = comm.SDRuTransmitter('IPAddress', sendingUSRPIPAddress, 'InterpolationFactor', interpolationFactor);

% Notes on characteristics of USRP Rx Daughter Board: 'SBXv3 RX'
% Minimum Frequency: 380 MHz, Maximum Frequency, 4420 MHz
% Minimum Gain: 0, Maximum Gain: 38
txSDR.Gain = 20;    % For the SBX daughterboard, this is a reasonable Tx gain
txSDR.TransportDataType = 'int16'; 
txSDR.CenterFrequency = 1500e6; % Sending frequency is a bit arbitrary, it is useful to send it at a frequency with good RF Tx/Rx characteristics

% NOTE: It was important to include a LO offset on the transmitter, 
% setting an LO offset on the receiver didn't seem to have much effect on the minimum signal level of the signal during the start sync vector (sending IQ sample values of zero amplitude)
txSDR.LocalOscillatorOffset = 10e6;

%% Step 3: Preappend 80 ms of zero amplitude IQ samples to the beginning of the radar waveform buffer as a Tx sync signal
NSampsPerSig = size(waveformSubset_1,1);

% Add one signal of all zeros that is used at the receiver to obtain dataset sync
if ~exist("addedZerosFlag")
    waveformSubset_1 = [eps*complex(ones(NSampsPerSig,1), ones(NSampsPerSig,1)) waveformSubset_1];
    addedZerosFlag = 1;
end

NSigs = size(waveformSubset_1, 2);

NTxSegments = 4;
segSamps = NSampsPerSig/NTxSegments;

flagString = [];
for tind = 1:NTxSegments
    flagString = [flagString '%d '];
end

% NOTE: I originally planning to normalize each waveform on transmit, but I decided NOT to normalize
% after I saw that high PAPR noise-only waveforms, or low SNR waveforms, were going to possibly lead to saturation with a Tx gain of 20 dB.
% Therefore, I disabled the normalization for each waveform prior to transmitting it, although there may be USRP setting with lower Tx gain that are  more tolerant of that approach.

% Normalize magnitude of each waveform separately
% maxVector = max(abs(waveformSubset_1));
% waveformSubset_1 = waveformSubset_1 ./ maxVector; % Normalizes the peak magnitude for each of the 80ms radar waveform

%% Step 4: Plot the time domain magnitude of the IQ samples that were sent
fprintf('Plotting modulated samples\n')

totalSamps = prod(size(waveformSubset_1));
plotVector = reshape(abs(waveformSubset_1), 1, totalSamps);
t_plot_ms = (0:totalSamps-1)/(Fs_Hz/1e3);

figure(1);
plot(t_plot_ms, 20*log10(plotVector)); grid

xlabel('Time (ms)')
ylabel('Magnitude')
title('Time plot of the Radar Waveforms to send')

fprintf('Started sending modulated samples\n')

%% Step 5: Enter loop to repeatedly send each of the waveform samples in the radar waveform dataset

% Make the number of transmission loop iterations large so that sending script sends the original radar dataset multiple times
% This allows the experimenter to start the receiving script asynchronously and stop the sending script (ctrl + c keys) once a good data collection has occured
NTransmits = 100000; 
UNDER = zeros(NTransmits, NTxSegments);

fprintf('Releasing the transmitter object\n');
release(txSDR) % include this buffer clear call in case I disable the clear statement and rerun this script

for ind = 1:NTransmits

    sigIndex = mod(ind-1, NSigs)+1;
    modSignal = waveformSubset_1(:, sigIndex);
    
    for sind = 1:NTxSegments
        UNDER(ind,sind) = step(txSDR, modSignal(1+(sind-1)*segSamps:segSamps*sind));           % transmit to USRP radio
    end
    
    fprintf('Loop iteration %d of %d. Sending waveform index # %d of %d. Under Flow Flags = [%d %d %d %d]\n', ind, NTransmits, sigIndex, NSigs, UNDER(ind,:));
    
end
